name: Publish

on:
  push:
    branches:
      - alpha
      - beta
      - main
      - vite

  workflow_dispatch:
    branches:
      - alpha
      - beta
      - main

jobs:
  semantic:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout git repo
        uses: actions/checkout@v3

      - name: Semantic Release
        uses: cycjimmy/semantic-release-action@v3
        id: semantic # Need an `id` for output variables
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Verify that Semantic Release updated package.json
        run: |
          cat package.json
          echo ${{ steps.semantic.outputs.new_release_version }} > semantic-version.txt
          echo "SEMANTIC_VERSION=$(cat semantic-version.txt)" >> $GITHUB_ENV

      - name: Create Release
        id: create_release
        uses: johnlindquist/kit-action@main
        with:
          script: create-release ${{ env.SEMANTIC_VERSION }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Write the Release id to release-id.txt
        run: |
          echo ${{ steps.create_release.outputs.result }} > release-id.txt

      - name: Upload Semantic Version Artifact
        uses: actions/upload-artifact@v3
        with:
          name: semantic-version
          path: semantic-version.txt

      - name: Upload Release id Artifact
        uses: actions/upload-artifact@v3
        with:
          name: release-id
          path: release-id.txt

  publish:
    needs: semantic
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [macos-12, ubuntu-latest, windows-latest]
        arch: [x64, arm64]
        node: [16.17.1]

    steps:
      - name: Checkout git repo
        uses: actions/checkout@v3

      - name: Download Semantic Version Artifact
        uses: actions/download-artifact@v3
        with:
          name: semantic-version

      - name: Download Release id Artifact
        uses: actions/download-artifact@v3
        with:
          name: release-id

      - name: Set Semantic Version Nix
        if: ${{ matrix.os != 'windows-latest' }}
        run: |
          echo "Semantic Version: $(cat semantic-version.txt)"
          # Set the semantic version as an environment variable
          echo "SEMANTIC_VERSION=$(cat semantic-version.txt)" >> $GITHUB_ENV

          echo "Release id: $(cat release-id.txt)"
          # Set the release id as an environment variable
          echo "RELEASE_ID=$(cat release-id.txt)" >> $GITHUB_ENV

          # If matrix.os is macos-12, set npm_config_platform to darwin
          # If matrix.os is ubuntu-latest, set npm_config_platform to linux
          # If matrix.os is windows-latest, set npm_config_platform to win32

          # if [[ "${{ matrix.os }}" == "macos-12" ]]; then
          #   echo "npm_config_platform=darwin" >> $GITHUB_ENV
          #   echo "npm_config_target_platform=darwin" >> $GITHUB_ENV
          # elif [[ "${{ matrix.os }}" == "ubuntu-latest" ]]; then
          #   echo "npm_config_platform=linux" >> $GITHUB_ENV
          #   echo "npm_config_target_platform=linux" >> $GITHUB_ENV
          # elif [[ "${{ matrix.os }}" == "windows-latest" ]]; then
          #   echo "npm_config_platform=win32" >> $GITHUB_ENV
          #   echo "npm_config_target_platform=win32" >> $GITHUB_ENV
          # fi

          # echo "npm_config_arch=${{ matrix.arch }}" >> $GITHUB_ENV
          # echo "npm_config_target_arch=${{ matrix.arch }}" >> $GITHUB_ENV

      - name: Set Semantic Version Windows
        if: ${{ matrix.os == 'windows-latest' }}
        run: |
          echo "Semantic Version: $(cat semantic-version.txt)"
          # Set the semantic version as an environment variable
          echo "SEMANTIC_VERSION=$(cat semantic-version.txt)" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append

          echo "Release id: $(cat release-id.txt)"
          # Set the release id as an environment variable
          echo "RELEASE_ID=$(cat release-id.txt)" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append

          # echo "npm_config_target_platform=win32" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
          # echo "npm_config_platform=win32" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append

          # echo "npm_config_arch=${{ matrix.arch }}" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
          # echo "npm_config_target_arch=${{ matrix.arch }}" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append

      - name: Write the Semantic Version to package.json version property
        uses: johnlindquist/kit-action@main
        with:
          script: update-package-version ${{ env.SEMANTIC_VERSION }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Create Assets
        uses: johnlindquist/kit-action@main
        with:
          script: create-assets ${{ env.SEMANTIC_VERSION }} ${{ matrix.os }} ${{ matrix.arch }} ${{ env.RELEASE_ID }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Install node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node }}

      - name: Install electron-builder and typescript compiler
        run: |
          npm i -g node-gyp@9.3.1 @electron/rebuild@3.2.10 electron-builder@23.6.0 typescript

      # If node-gyp cache exists on Windows, remove it
      - name: Remove node-gyp cache
        if: matrix.os == 'windows-latest'
        run: |
          Remove-Item -Path "$env:USERPROFILE\.node_gyp" -Recurse -Force

      - name: npm i
        run: npm i

      - name: Publish windows
        if: matrix.os == 'windows-latest'
        env:
          # These values are used for auto updates signing
          APPLE_ID: ${{ secrets.APPLE_ID }}
          APPLE_ID_PASS: ${{ secrets.APPLE_ID_PASS }}
          CSC_LINK: ${{ secrets.CSC_LINK }}
          CSC_KEY_PASSWORD: ${{ secrets.CSC_KEY_PASSWORD }}
          # This is used for uploading release assets to github
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          npm run build
          electron-builder --publish always --win --${{ matrix.arch }}

      - name: Publish linux
        if: matrix.os == 'ubuntu-latest'
        env:
          # These values are used for auto updates signing
          APPLE_ID: ${{ secrets.APPLE_ID }}
          APPLE_ID_PASS: ${{ secrets.APPLE_ID_PASS }}
          CSC_LINK: ${{ secrets.CSC_LINK }}
          CSC_KEY_PASSWORD: ${{ secrets.CSC_KEY_PASSWORD }}
          # This is used for uploading release assets to github
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          npm run build
          electron-builder --publish always --linux AppImage deb rpm --${{ matrix.arch }}

      - name: Publish mac
        if: matrix.os == 'macos-12'
        env:
          # These values are used for auto updates signing
          APPLE_ID: ${{ secrets.APPLE_ID }}
          APPLE_ID_PASS: ${{ secrets.APPLE_ID_PASS }}
          CSC_LINK: ${{ secrets.CSC_LINK }}
          CSC_KEY_PASSWORD: ${{ secrets.CSC_KEY_PASSWORD }}
          # This is used for uploading release assets to github
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          npm i node-mac-permissions
          npm run build
          electron-builder --publish always --mac --${{ matrix.arch }}
