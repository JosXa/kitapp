name: Publish

on:
  push:
    branches:
      - alpha
      - beta
      - main

  workflow_dispatch:
    branches:
      - alpha
      - beta
      - main

jobs:
  semantic:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout git repo
        uses: actions/checkout@v3

      - name: Semantic Release
        uses: cycjimmy/semantic-release-action@v3
        id: semantic # Need an `id` for output variables
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Verify that Semantic Release updated src/package.json
        run: |
          cat src/package.json
          echo ${{ steps.semantic.outputs.new_release_version }} > semantic-version.txt
          echo "SEMANTIC_VERSION=$(cat semantic-version.txt)" >> $GITHUB_ENV

      - name: Create Release
        id: create_release
        uses: johnlindquist/kit-action@main
        with:
          script: create-release ${{ env.SEMANTIC_VERSION }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Write the Release id to release-id.txt
        run: |
          echo ${{ steps.create_release.outputs.result }} > release-id.txt

      - name: Upload Semantic Version Artifact
        uses: actions/upload-artifact@v3
        with:
          name: semantic-version
          path: semantic-version.txt

      - name: Upload Release id Artifact
        uses: actions/upload-artifact@v3
        with:
          name: release-id
          path: release-id.txt

  publish:
    needs: semantic
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [macos-12, windows-latest, ubuntu-latest]
        arch: [x64, arm64]
        node: [18.17.1]

    steps:
      - name: Checkout git repo
        uses: actions/checkout@v3

      - name: Download Semantic Version Artifact
        uses: actions/download-artifact@v3
        with:
          name: semantic-version

      - name: Download Release id Artifact
        uses: actions/download-artifact@v3
        with:
          name: release-id

      - name: Nix - Set Semantic Version
        if: ${{ matrix.os != 'windows-latest' }}
        run: |
          echo "Semantic Version: $(cat semantic-version.txt)"
          # Set the semantic version as an environment variable
          echo "SEMANTIC_VERSION=$(cat semantic-version.txt)" >> $GITHUB_ENV

          echo "Release id: $(cat release-id.txt)"
          # Set the release id as an environment variable
          echo "RELEASE_ID=$(cat release-id.txt)" >> $GITHUB_ENV

      - name: Windows - Set Semantic Version
        if: ${{ matrix.os == 'windows-latest' }}
        run: |
          echo "Semantic Version: $(cat semantic-version.txt)"
          # Set the semantic version as an environment variable
          echo "SEMANTIC_VERSION=$(cat semantic-version.txt)" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append

          echo "Release id: $(cat release-id.txt)"
          # Set the release id as an environment variable
          echo "RELEASE_ID=$(cat release-id.txt)" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append

      - name: Write the Semantic Version to src/package.json version property
        uses: johnlindquist/kit-action@main
        with:
          script: update-package-version ${{ env.SEMANTIC_VERSION }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Nix - Write the current branch to a releaseChannel env var
        if: ${{ matrix.os != 'windows-latest' }}
        run: |
          echo "RELEASE_CHANNEL=$(git rev-parse --abbrev-ref HEAD)" >> $GITHUB_ENV

      - name: Windows - Write the current branch to a releaseChannel env var
        if: ${{ matrix.os == 'windows-latest' }}
        run: |
          echo "RELEASE_CHANNEL=$(git rev-parse --abbrev-ref HEAD)" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append

      - name: Download kenv
        uses: johnlindquist/kit-action@main
        with:
          script: download-kenv ${{ env.RELEASE_CHANNEL }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # This script created a tar without the node_modules folder. Moved logic to create-assets
      # - name: Create Kit tarball
      #   uses: johnlindquist/kit-action@main
      #   with:
      #     script: create-kit-tar
      #   env:
      #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Create Assets for x64
        if: matrix.arch == 'x64'
        uses: johnlindquist/kit-action@main
        with:
          script: create-assets ${{ env.SEMANTIC_VERSION }} ${{ matrix.os }} x64 ${{ env.RELEASE_ID }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Create Assets for arm64
        if: matrix.arch == 'arm64'
        uses: johnlindquist/kit-action@main
        with:
          script: create-assets ${{ env.SEMANTIC_VERSION }} ${{ matrix.os }} arm64 ${{ env.RELEASE_ID }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Install Node, NPM and Yarn for Linux
        if: matrix.os == 'ubuntu-latest'
        uses: actions/setup-node@v3
        with:
          node-version: 18.15.0

      - name: Install Node, NPM and Yarn for other OS
        if: matrix.os != 'ubuntu-latest'
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node }}

      - name: Set Electron version for Linux
        if: matrix.os == 'ubuntu-latest'
        run: |
          jq '.devDependencies.electron = "25.3.2"' package.json > temp.json && mv temp.json package.json

      - name: Publish windows x64
        if: matrix.os == 'windows-latest' && matrix.arch == 'x64'
        env:
          # These values are used for auto updates signing
          APPLE_ID: ${{ secrets.APPLE_ID }}
          APPLE_ID_PASS: ${{ secrets.APPLE_ID_PASS }}
          CSC_LINK: ${{ secrets.CSC_LINK }}
          CSC_KEY_PASSWORD: ${{ secrets.CSC_KEY_PASSWORD }}
          # This is used for uploading release assets to github
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          npx kit remove-mac
          cd ./src
          yarn remove node-mac-permissions @johnlindquist/mac-clipboard-listener @johnlindquist/mac-frontmost @johnlindquist/mac-panel-window
          Push-Location node_modules\uiohook-napi\prebuilds; Get-ChildItem | Where-Object { $_.Name -notmatch '^win' } | Remove-Item -Recurse -Force; Pop-Location
          if (Test-Path node_modules\@nut-tree\libnut-darwin) { Remove-Item node_modules\@nut-tree\libnut-darwin -Recurse -Force }
          if (Test-Path node_modules\@nut-tree\libnut-linux) { Remove-Item node_modules\@nut-tree\libnut-linux -Recurse -Force }
          cat ./package.json
          cd ..
          echo "--- Done removing mac deps ---\n\n"
          yarn build
          yarn electron-builder --publish always --win --x64

      - name: Publish windows arm64
        if: matrix.os == 'windows-latest' && matrix.arch == 'arm64'
        env:
          # These values are used for auto updates signing
          APPLE_ID: ${{ secrets.APPLE_ID }}
          APPLE_ID_PASS: ${{ secrets.APPLE_ID_PASS }}
          CSC_LINK: ${{ secrets.CSC_LINK }}
          CSC_KEY_PASSWORD: ${{ secrets.CSC_KEY_PASSWORD }}
          # This is used for uploading release assets to github
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          npx kit remove-tick
          npx kit remove-mac
          npx kit remove-nut
          cd ./src
          yarn remove node-mac-permissions @nut-tree/nut-js uiohook-napi @johnlindquist/mac-clipboard-listener @johnlindquist/mac-frontmost @johnlindquist/mac-panel-window
          cat ./package.json
          cd ..
          yarn build
          echo "--- Done removing mac deps ---\n\n"
          yarn electron-builder --publish always --win --arm64

      - name: Publish linux x64
        if: matrix.os == 'ubuntu-latest' && matrix.arch == 'x64'
        env:
          # These values are used for auto updates signing
          APPLE_ID: ${{ secrets.APPLE_ID }}
          APPLE_ID_PASS: ${{ secrets.APPLE_ID_PASS }}
          CSC_LINK: ${{ secrets.CSC_LINK }}
          CSC_KEY_PASSWORD: ${{ secrets.CSC_KEY_PASSWORD }}
          # This is used for uploading release assets to github
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          npx kit remove-mac
          cd ./src
          yarn remove node-mac-permissions @johnlindquist/mac-clipboard-listener @johnlindquist/mac-frontmost @johnlindquist/mac-panel-window
          cat ./package.json
          cd ..
          echo "--- Done removing mac deps ---\n\n"
          yarn build
          yarn electron-builder --publish always --linux AppImage deb rpm --x64

      - name: Publish linux arm64
        if: matrix.os == 'ubuntu-latest' && matrix.arch == 'arm64'
        env:
          # These values are used for auto updates signing
          APPLE_ID: ${{ secrets.APPLE_ID }}
          APPLE_ID_PASS: ${{ secrets.APPLE_ID_PASS }}
          CSC_LINK: ${{ secrets.CSC_LINK }}
          CSC_KEY_PASSWORD: ${{ secrets.CSC_KEY_PASSWORD }}
          # This is used for uploading release assets to github
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          npx kit remove-tick
          npx kit remove-mac
          npx kit remove-nut
          cd ./src
          yarn remove node-mac-permissions @nut-tree/nut-js uiohook-napi @johnlindquist/mac-clipboard-listener @johnlindquist/mac-frontmost @johnlindquist/mac-panel-window
          cat ./package.json
          cd ..
          echo "--- Done removing mac deps ---\n\n"
          yarn build
          yarn electron-builder --publish always --linux AppImage deb rpm --arm64

      - name: Publish mac x64
        if: matrix.os == 'macos-12' && matrix.arch == 'x64'
        env:
          # These values are used for auto updates signing
          APPLE_ID: ${{ secrets.APPLE_ID }}
          APPLE_ID_PASS: ${{ secrets.APPLE_ID_PASS }}
          CSC_LINK: ${{ secrets.CSC_LINK }}
          CSC_KEY_PASSWORD: ${{ secrets.CSC_KEY_PASSWORD }}
          APPLE_APP_SPECIFIC_PASSWORD: ${{ secrets.APPLE_APP_SPECIFIC_PASSWORD }}
          # This is used for uploading release assets to github
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          yarn build
          yarn electron-builder --publish always --mac --x64
          ls ./release

      - name: Publish mac arm64
        if: matrix.os == 'macos-12' && matrix.arch == 'arm64'
        env:
          # These values are used for auto updates signing
          APPLE_ID: ${{ secrets.APPLE_ID }}
          APPLE_ID_PASS: ${{ secrets.APPLE_ID_PASS }}
          CSC_LINK: ${{ secrets.CSC_LINK }}
          CSC_KEY_PASSWORD: ${{ secrets.CSC_KEY_PASSWORD }}
          APPLE_APP_SPECIFIC_PASSWORD: ${{ secrets.APPLE_APP_SPECIFIC_PASSWORD }}
          # This is used for uploading release assets to github
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          yarn build
          yarn electron-builder --publish always --mac --arm64
          ls ./release
